// File: GA.h
//
// Description: header file for GA (genetic algorithm) ADT
//
// @author Maximus Milazzo
//
///////////////////////////////////////////////////////////



#include <stdio.h>
#include <stdlib.h>
#include <time.h>



/// "Default" genetic algorithm parameters used to initialize GA in GA_default;
/// it is not recommended to use these default values to initialize a GA to
/// solve specifc problems -- these values should really only be used for
/// non-production code and for testing/demonstration
///
/// num_parents = 100
/// num_children = 200
/// num_genes = 10
/// crossover_mode = 0
/// gene_combination_chance = 0.5
/// mutation_chance = 0.1
/// mutation_factor = 0.1
/// gene_swap_chance = 0.05
/// start_parents = NULL
/// parent_val_range = 50
///
///////////////////////////////////////////////////////////
#define DEFAULT_GA_PARAMS 100, 200, 10, 0, 0.5, 0.1, 0.1, 0.05, NULL, 50



/// Defines GA type
typedef struct GA_s * GA;



/// Initializes a new genetic algorithm (GA) instance.
///
/// @param num_parents - the number of parents in the population; new parents
///    are selected from the set of most "fit" children each generation
/// @param num_children - the number of children in the population; children
///    are generated by simulating mating of the parents
/// @param num_genes - the number of genes present in an individual
/// @param crossover_mode - the crossover mode used during breeding simulation;
///    0 - uniform crossover
///    1 - single point crossover
///    2 - double point crossover
/// @param gene_combination_chance - the chance that, when using a compatibe
///    crossover mode, like uniform crossover, the gene value of a child will
///    be the average gene value of the parents
/// @param mutation_chance - the chance that a mutation will occur for any
///    particular gene
/// @param mutation_factor - the maximum magnitude value change that can occur
///    as the result of a mutation
/// @param gene_swap_chance - the chance that a particular gene in a child will
///    swap values with the same-indexed gene of another randomly selected child
///    during the mutation process;  this feature is less common in genetic
///    algorithm implementations and is not easily comparable to real-world
///    evolutionary concepts, but it is an experimental feature that can be used
///    (if desired) to increase genetic diversity in a population set
/// @param start_parents - the "first generation" parents in a population;
///    this value can also be set to NULL and starting parent alleles will be
///    randomly generated
/// @param parent_val_range - defines the range of values that parent alleles
///    can take on when randomly generated;  both positive and negative values
///    with magnitudes less than or equal to this value are possible
/// @param fitness_calc - the user-passed fitness calculation function;
///    this function takes in a single individual (or entity) from the population
///    and returns a "fitness" value marking how well it performed in
///    accomplishing the user's defined goals -- this function returns higher
///    (more positive) values when an entity has high fitness and lower (more
///    negative) values when an entity has low fitness;  the results of this
///    fucntion ultimately determine which parents and children are allowed to
///    live on and reproduce
///
/// @return the GA instance

GA GA_init(int num_parents, int num_children, int num_genes, int crossover_mode,
  double gene_combination_chance, double mutation_chance, double mutation_factor, 
  double gene_swap_chance, double ** start_parents, int parent_val_range, 
  double (*fitness_calc)(double * entity));



/// Initializes a new genetic algorithm (GA) instance with default parameters.
///
/// @param fitness_calc - the user-passed fitness calculation function;
///    this function takes in a single individual (or entity) from the population
///    and returns a "fitness" value marking how well it performed in
///    accomplishing the user's defined goals -- this function returns higher
///    (more positive) values when an entity has high fitness and lower (more
///    negative) values when an entity has low fitness;  the results of this
///    fucntion ultimately determine which parents and children are allowed to
///    live on and reproduce
///
/// @return the GA instance

GA GA_default(double (*fitness_calc)(double * entity));



/// Runs a genetic algorithm (GA) instance for some number of generations.
///
/// @param optimizer - the GA instance
/// @param generations - the number of generations to run the genetic algorithm
///
/// @return the most genetically "fit" parent after running all generations

double * GA_run(GA optimizer, int generations);



/// Deallocates memory used for GA instance.
///
/// @param optimizer - the GA instance

void GA_destroy(GA optimizer);
